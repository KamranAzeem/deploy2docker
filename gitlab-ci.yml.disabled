stages:
  - check
  - deploy

variables:
  DOCKER_SERVER_FQDN: dev.wbitt.com

  SSH_USER: deployer

  # The TODO/TASKS directory on the target docker server.
  DOCKER_TASKS_DIRECTORY: /home/deploy2docker/deployer.tasks.d


# 'run-lint' is a 'job', which belongs to the 'check' 'stage':
run-lint:
  stage: check
  image: php:cli-alpine
  script:
    - find . -name '*.php' -exec php -ln '{}' ';'
  only:
    - master

deploy-image:
  # This is the smallest image with scp,  ssh-keyscan and other ssh utils in it.
  # Size of this image is about 15 MB
  image: kamranazeem/ssh-server
  stage: deploy
  script:
    # Any echo command with colon in it must be handled differently:
    # https://gitlab.com/gitlab-com/support-forum/issues/3109
    - 'echo "CI_COMMIT_SHORT_SHA is: ${CI_COMMIT_SHORT_SHA}"'
    # The private SSH_KEY is base64 encoded, stored in the gitlab environment variable: SSH_KEY.
    #   It needs to be decoded before it can be used.
    - echo $SSH_KEY | base64 -d > ~/ssh-key
    - chmod 0600 ~/ssh-key
    # The name of the TASK_FILE could be anything, 
    #   but it's best to use just the : repo-name
    - TASK_FILE=${CI_PROJECT_NAME}
    # TASK_FILE format is the following: 
    #    <full-git-repo-url>  <space|tab>  <git-repo-hash> 
    # - echo -e "${CI_REPOSITORY_URL} ${CI_COMMIT_SHORT_SHA}" > ~/${TASK_FILE}
    - echo -e "${CI_PROJECT_URL}.git ${CI_COMMIT_SHORT_SHA}" > ~/${TASK_FILE}
    # First, find and store the SSH fingerprint of remote host:
    - ssh-keyscan -H ${DOCKER_SERVER_FQDN}  >> ~/.ssh/known_hosts
    # Transport the TASK_FILE to the target server. 
    #   The scheduler/control-loop over there will pick it up , and will process it.
    - scp -i ~/ssh-key ~/${TASK_FILE} ${SSH_USER}@${DOCKER_SERVER_FQDN}:/${DOCKER_TASKS_DIRECTORY}/

  only:
    - master

# Some notes:
# ----------
# * The 'CI_REPOSITORY_URL' contains a ("one time") 'deploy-token' (generated by gitlab itself), 
#   which is used to read the repository only - for git clone or pull. 
#   If you don't want that, then use 'CI_PROJECT_URL' and a '.git' appended to it.
#   In that case, there needs to be a local git auth/credential mechanism on the docker server,
#      for the 'deployer' user to be able to do 'git pull' and/or 'git clone'.
#   Examples of these two variables:
#   - CI_REPOSITORY_URL="https://gitlab-ci-token:abcde-1234ABCD5678ef@example.com/gitlab-org/gitlab-foss.git"
#   - CI_PROJECT_URL="https://example.com/gitlab-org/gitlab-foss"



# The token changes with every CI run:
#
# [kamran@kworkhorse deploy2docker]$ grep token logs/*
# 2020-08-02_22:21:03 Syntax of  GIT repository URL 'https://gitlab-ci-token:NBSpEh9zsSeDExxBDSeU@gitlab.com/witline/wordpress/blogdemo.wbitt.com.git' seem to be OK.
# 2020-08-03_08:56:03 Syntax of  GIT repository URL 'https://gitlab-ci-token:JSytdQsmyUwJ_GxPzzVR@gitlab.com/witline/wordpress/blogdemo.wbitt.com.git' seem to be OK.
# 2020-08-04_21:41:01 Syntax is OK for GIT repository URL: 'https://gitlab-ci-token:tzST-SDHDVfR7pxJWK_t@gitlab.com/witline/wordpress/blogdemo.wbitt.com.git'
# [kamran@kworkhorse deploy2docker]$

# The token does not work once it has already been used by GITLAB-CI during it's run. 
# So, security-wise it is pretty useless to anyone, and therefore is harmless to appear in any logs, etc.
#
# [kamran@kworkhorse tmp]$ git clone https://gitlab-ci-token:tzST-SDHDVfR7pxJWK_t@gitlab.com/witline/wordpress/blogdemo.wbitt.com.git
# Cloning into 'blogdemo.wbitt.com'...
# remote: HTTP Basic: Access denied
# fatal: Authentication failed for 'https://gitlab.com/witline/wordpress/blogdemo.wbitt.com.git/'
# [kamran@kworkhorse tmp]$ 


